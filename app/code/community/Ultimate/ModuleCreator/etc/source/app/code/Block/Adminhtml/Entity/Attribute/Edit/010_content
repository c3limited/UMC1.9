<?php
{{License}}
/**
 * {{EntityLabel}} attribute edit block
 *
 * @category    {{Namespace}}
 * @package     {{Namespace}}_{{Module}}
 */
class {{Namespace}}_{{Module}}_Block_Adminhtml_{{Entity}}_Attribute_Edit
    extends Mage_Adminhtml_Block_Widget_Form_Container {
    /**
     * constructor
     *
     * @access public
     */
    public function __construct() {
        $this->_objectId = 'attribute_id';
        $this->_controller = 'adminhtml_{{entity}}_attribute';
        $this->_blockGroup = '{{namespace}}_{{module}}';

        parent::__construct();
        $this->_addButton(
            'save_and_edit_button',
            array(
                'label'     => Mage::helper('{{namespace}}_{{module}}')->__('Save and Continue Edit'),
                'onclick'   => 'saveAndContinueEdit()',
                'class'     => 'save'
            ),
            100
        );
        $this->_updateButton('save', 'label', Mage::helper('{{namespace}}_{{module}}')->__('Save {{EntityLabel}} Attribute'));
        $this->_updateButton('save', 'onclick', 'saveAttribute()');

        if (!Mage::registry('entity_attribute')->getIsUserDefined()) {
            $this->_removeButton('delete');
        } else {
            $this->_updateButton('delete', 'label', Mage::helper('{{namespace}}_{{module}}')->__('Delete {{EntityLabel}} Attribute'));
        }
    }

    /**
     * Get the header text for the form
     *
     * @access public
     * @return string
     */
    public function getHeaderText() {
        if (Mage::registry('entity_attribute')->getId()) {
            $frontendLabel = Mage::registry('entity_attribute')->getFrontendLabel();
            if (is_array($frontendLabel)) {
                $frontendLabel = $frontendLabel[0];
            }
            return Mage::helper('{{namespace}}_{{module}}')->__('Edit {{EntityLabel}} Attribute "%s"', $this->htmlEscape($frontendLabel));
        }
        else {
            return Mage::helper('{{namespace}}_{{module}}')->__('New {{EntityLabel}} Attribute');
        }
    }

    /**
     * Get validation url for form
     *
     * @access public
     * @return string
     */
    public function getValidationUrl() {
        return $this->getUrl('*/*/validate', array('_current'=>true));
    }

    /**
     * Get save url for form
     *
     * @access public
     * @return string
     */
    public function getSaveUrl() {
        return $this->getUrl('*/'.$this->_controller.'/save', array('_current'=>true, 'back'=>null));
    }
}
