class {{Namespace}}_{{Module}}_Block_Adminhtml_{{Entity}}_Edit_Form
    extends {{Namespace}}_{{Module}}_Block_Adminhtml_{{Entity}}_Abstract {

    /**
     * Additional buttons on {{entityLabel}} page
     * @var array
     */
    protected $_additionalButtons = array();
    /**
     * constructor
     * set template
     *
     * @access public
     */
    public function __construct() {
        parent::__construct();
        $this->setTemplate('{{namespace}}_{{module}}/{{entity}}/edit/form.phtml');
    }

    /**
     * prepare the layout
     * @access protected
     * @return {{Namespace}}_{{Module}}_Block_Adminhtml_{{Entity}}_Edit_Form
     */
    protected function _prepareLayout() {
        ${{entity}} = $this->get{{Entity}}();
        ${{entity}}Id = (int)${{entity}}->getId();
        $this->setChild('tabs',
            $this->getLayout()->createBlock('{{namespace}}_{{module}}/adminhtml_{{entity}}_edit_tabs', 'tabs')
        );
        $this->setChild('save_button',
            $this->getLayout()->createBlock('adminhtml/widget_button')
                ->setData(array(
                    'label' => Mage::helper('{{namespace}}_{{module}}')->__('Save {{EntityLabel}}'),
                    'onclick'   => "{{entity}}Submit('" . $this->getSaveUrl() . "', true)",
                    'class' => 'save'
            ))
        );
        // Delete button
        if (!in_array(${{entity}}Id, $this->getRootIds())) {
            $this->setChild('delete_button',
                $this->getLayout()->createBlock('adminhtml/widget_button')
                    ->setData(array(
                        'label' => Mage::helper('{{namespace}}_{{module}}')->__('Delete {{EntityLabel}}'),
                        'onclick'   => "{{entity}}Delete('" . $this->getUrl('*/*/delete', array('_current' => true)) . "', true, {${{entity}}Id})",
                        'class' => 'delete'
                ))
            );
        }

        // Reset button
        $resetPath = ${{entity}} ? '*/*/edit' : '*/*/add';
        $this->setChild('reset_button',
            $this->getLayout()->createBlock('adminhtml/widget_button')
                ->setData(array(
                    'label' => Mage::helper('{{namespace}}_{{module}}')->__('Reset'),
                    'onclick'   => "{{entity}}Reset('".$this->getUrl($resetPath, array('_current'=>true))."',true)"
            ))
        );
        return parent::_prepareLayout();
    }

    /**
     * Get html for delete button
     *
     * @access public
     * @return string
     */
    public function getDeleteButtonHtml() {
        return $this->getChildHtml('delete_button');
    }

    /**
     * Get html for save button
     *
     * @access public
     * @return string
     */
    public function getSaveButtonHtml() {
        return $this->getChildHtml('save_button');
    }

    /**
     * Get html for reset button
     *
     * @access public
     * @return string
     */
    public function getResetButtonHtml() {
        return $this->getChildHtml('reset_button');
    }

    /**
     * Retrieve additional buttons html
     *
     * @access public
     * @return string
     */
    public function getAdditionalButtonsHtml() {
        $html = '';
        foreach ($this->_additionalButtons as $childName) {
            $html .= $this->getChildHtml($childName);
        }
        return $html;
    }

    /**
     * Add additional button
     *
     * @param string $alias
     * @param array $config
     * @return {{Namespace}}_{{Module}}_Block_Adminhtml_{{Entity}}_Edit_Form
     */
    public function addAdditionalButton($alias, $config) {
        if (isset($config['name'])) {
            $config['element_name'] = $config['name'];
        }
        $this->setChild($alias . '_button',
        $this->getLayout()->createBlock('adminhtml/widget_button')->addData($config));
        $this->_additionalButtons[$alias] = $alias . '_button';
        return $this;
    }

    /**
     * Remove additional button
     *
     * @access public
     * @param string $alias
     * @return {{Namespace}}_{{Module}}_Block_Adminhtml_{{Entity}}_Edit_Form
     */
    public function removeAdditionalButton($alias) {
        if (isset($this->_additionalButtons[$alias])) {
            $this->unsetChild($this->_additionalButtons[$alias]);
            unset($this->_additionalButtons[$alias]);
        }
        return $this;
    }

    /**
     * Get html for tabs
     *
     * @access public
     * @return string
     */
    public function getTabsHtml() {
        return $this->getChildHtml('tabs');
    }

    /**
     * Get the form header
     *
     * @access public
     * @return string
     */
    public function getHeader() {
        if ($this->get{{Entity}}Id()) {
            return $this->get{{Entity}}{{EntityNameMagicCode}}();
        }
        else {
            return Mage::helper('{{namespace}}_{{module}}')->__('New Root {{EntityLabel}}');
        }
    }

    /**
     * Get the delete url
     *
     * @access public
     * @param array $args
     * @return string
     */
    public function getDeleteUrl(array $args = array()) {
        $params = array('_current'=>true);
        $params = array_merge($params, $args);
        return $this->getUrl('*/*/delete', $params);
    }

    /**
     * Return URL for refresh input element 'path' in form
     *
     * @access public
     * @param array $args
     * @return string
     */
    public function getRefreshPathUrl(array $args = array()) {
        $params = array('_current'=>true);
        $params = array_merge($params, $args);
        return $this->getUrl('*/*/refreshPath', $params);
    }

    /**
     * check if request is ajax
     *
     * @access public
     * @return bool
     */
    public function isAjax() {
        return Mage::app()->getRequest()->isXmlHttpRequest() || Mage::app()->getRequest()->getParam('isAjax');
    }
